import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class TestSeaBattle {
    public static void main(String[] args) throws InterruptedException {
        SeaBattle seaBattle = new SeaBattle();
        seaBattle.play();
    }
}

public class SeaBattle {
    private final Player player1;
    private final Player player2;
    private boolean isPlaying = false;
    private static final Scanner scanner = new Scanner(System.in);
    public SeaBattle() {
        player1 = new Player();
        player2 = new Player();
    }
    public void play() throws InterruptedException {
        System.out.println("                   ‚Äâ‚Äâ‚ò†Ô∏è –ú–æ—Ä—Å–∫–æ–π –±–æ–π! ‚öîÔ∏è");
        player1.showAll();
        player1.playerWait();
        isPlaying = true;
        player1.place();
        player2.place();
        while (isPlaying) {
            player1.guesses(player2);
            player2.guesses(player1);
        }
    }
    private class Player {
        private int id = 0;
        private static int playerCounter = 0;
        private final String[][] field;
        private final String[][] otherField;
        private final int[][] fieldWithShips;
        private final List<Integer> shipsWounded;
        private final String emptyCell = "\033[1;37m‚ñ®\033[0m";
        private final String shipCell = "\033[1;32m‚ñ®\033[0m";
        private final String shipCellInjured = "\033[1;38;5;208m‚ñ®\033[0m";
        private final String shipCellKilled = "\033[1;31m‚ñ®\033[0m";
        private final String shipCellMissed = "\033[30m‚ñ¶\033[0m";
        private int fourCellSheep = 1;
        private int threeCellSheep = 1;
        private int twoCellSheep = 1;
        private int oneCellSheep = 0;
        private int totalPlayerShips = fourCellSheep + threeCellSheep + twoCellSheep + oneCellSheep;
        public Player() {
            playerCounter++;
            this.id += playerCounter;
            this.field = new String[10][10];
            this.otherField = new String[10][10];
            this.fieldWithShips = new int[10][10];
            this.shipsWounded = new ArrayList<>(totalPlayerShips);
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    field[i][j] = emptyCell;
                    otherField[i][j] = emptyCell;
                }
            }

        }
        private void playerWait() throws InterruptedException {
            Thread.sleep(3000);
            for (int i = 0; i < 30; i++) {
                Thread.sleep(200);
                System.out.print("\n");
            }
        }
        private void show() {
            System.out.println("  A ‚Äâ‚Äâ–ë ‚Äâ–í ‚Äâ–ì ‚Äâ‚Äâ–î ‚Äâ–ï ‚Äâ–ñ ‚Äâ‚Äâ–ó ‚Äâ–ò ‚Äâ–ö");
            for (int i = 0; i < 10; i++) {
                System.out.print(i + " ");
                for (int j = 0; j < 10; j++) {
                    System.out.print(field[i][j] + " ");
                }
                System.out.println();
            }
        }
        public void showAll() {
            if (isPlaying) {
                System.out.println("         –í–∞—à–µ –ø–æ–ª–µ                   ‚Äâ–ü–æ–ª–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞");
            } else {
                System.out.println("       –ü–æ–ª–µ 1 –∏–≥—Ä–æ–∫–∞                 ‚Äâ‚Äâ‚Äâ–ü–æ–ª–µ 2 –∏–≥—Ä–æ–∫–∞");
            }
            System.out.println("  A ‚Äâ‚Äâ–ë ‚Äâ–í ‚Äâ–ì ‚Äâ‚Äâ–î ‚Äâ–ï ‚Äâ–ñ ‚Äâ‚Äâ–ó ‚Äâ–ò ‚Äâ–ö        ‚ÄâA ‚Äâ‚Äâ–ë ‚Äâ–í ‚Äâ–ì ‚Äâ‚Äâ–î ‚Äâ–ï ‚Äâ–ñ ‚Äâ‚Äâ–ó ‚Äâ–ò ‚Äâ–ö");
            for (int i = 0; i < 10; i++) {
                System.out.print(i + " ");
                for (int j = 0; j < 10; j++) {
                    System.out.print(field[i][j] + " ");
                }
                System.out.print("  ‚îÇ  " + i + " ");
                for (int j = 0; j < 10; j++) {
                    System.out.print(otherField[i][j] + " ");
                }
                System.out.println();
            }
        }

        private void guesses(Player otherPlayer) throws InterruptedException {
            if (isPlaying) {
                System.out.println("‚ñ∫ –ò–≥—Ä–æ–∫-" + id + " —Ö–æ–¥–∏—Ç:");
                showAll();
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–ª–µ—Ç–∫—É:");
                String choice = scanner.nextLine();
                while (!choice.matches("[–∞-–∫][0-9]")) {
                    System.out.println("–¢–∞–∫–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n‚ñ∫ –ò–≥—Ä–æ–∫-" + id + " —Ö–æ–¥–∏—Ç:");
                    showAll();
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–ª–µ—Ç–∫—É:");
                    choice = scanner.nextLine();
                }
                int horizontal = getHorizontal(choice.toUpperCase().charAt(0));
                int vertical = Character.getNumericValue(choice.charAt(1));
                if (otherPlayer.field[vertical][horizontal].equals(shipCell)) {
                    otherPlayer.field[vertical][horizontal] = otherField[vertical][horizontal] = shipCellInjured;
                    System.out.println("–ü–æ–ø–∞–¥–∞–Ω–∏–µ! üí£üí•");
                    boolean isNewWounded = true;
                    for (Integer ship : otherPlayer.shipsWounded) {
                        if (otherPlayer.fieldWithShips[vertical][horizontal] == ship) {
                            isNewWounded = false;
                            break;
                        }
                    }
                    if (isNewWounded) {
                        otherPlayer.shipsWounded.add(otherPlayer.fieldWithShips[vertical][horizontal]);
                    }
                    otherPlayer.fieldWithShips[vertical][horizontal] -= 11;
                    boolean isKilled = true;
                    int shipToRemove = 0;
                    for (Integer ship : otherPlayer.shipsWounded) {
                        for (int i = 0; i < 10; i++) {
                            for (int j = 0; j < 10; j++) {
                                if (otherPlayer.fieldWithShips[i][j] == ship) {
                                    isKilled = false;
                                    continue;
                                }
                            }
                        }
                        if (isKilled) {
                            System.out.println("üè¥‚Äç‚ò†Ô∏è –ö–æ—Ä–∞–±–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω! üè¥‚Äç‚ò†Ô∏è");
                            shipToRemove = ship;
                            break;
                        }
                    }
                    if (isKilled) {
                        for (int i = 0; i < otherPlayer.shipsWounded.size(); i++) {
                            if (otherPlayer.shipsWounded.get(i) == shipToRemove) {
                                otherPlayer.shipsWounded.remove(i);
                            }
                        }
                        for (int i = 0; i < 10; i++) {
                            for (int j = 0; j < 10; j++) {
                                if (otherPlayer.fieldWithShips[i][j] == shipToRemove-11) {
                                    otherPlayer.field[i][j] = shipCellKilled;
                                    otherField[i][j] = shipCellKilled;
                                }
                            }
                        }
                    }
                    checkWin(otherPlayer);
                    guesses(otherPlayer);
                } else if (otherPlayer.field[vertical][horizontal].equals(shipCellKilled) || otherPlayer.field[vertical][horizontal].equals(shipCellInjured) || otherPlayer.field[vertical][horizontal].equals(shipCellMissed)) {
                    System.out.println("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞!");
                    guesses(otherPlayer);
                } else {
                    otherPlayer.field[vertical][horizontal] = otherField[vertical][horizontal] = shipCellMissed;
                    System.out.println("–ú–∏–º–æ! üí£üí¶");
                    showAll();
                    playerWait();
                }
            }
        }
        private void checkWin(Player otherPlayer) {
            isPlaying = false;
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    if (otherPlayer.field[i][j].equals(shipCell)) {
                        isPlaying = true;
                        break;
                    }
                }
            }
            if (!isPlaying) {
                System.out.println("\n\n\n\n\n\n\n\n\n");
                showAll();
                System.out.println("\uD83C\uDF89 Player-" + this.id + " win! \uD83C\uDF89");
            }
        }
        private void place() throws InterruptedException {
            while (totalPlayerShips != 0) {
                System.out.println("‚ñ∫ –ò–≥—Ä–æ–∫-" + this.id + " —Å—Ç–∞–≤–∏—Ç –∫–æ—Ä–∞–±–ª–∏:");
                show();
                System.out.println("–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å: " + totalPlayerShips + " –∫–æ—Ä–∞–±–ª–µ–π\n–†–∞–∑–º–µ—Å—Ç–∏—Ç—å:\n1) " + oneCellSheep + " - –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã—Ö\n2) " + twoCellSheep + " - –¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã—Ö\n3) " + threeCellSheep + " - —Ç—Ä—ë—Ö–ø–∞–ª—É–±–Ω—ã—Ö\n4) " + fourCellSheep + " - —á–µ—Ç—ã—Ä—ë—Ö–ø–∞–ª—É–±–Ω—ã—Ö");
                String choice = scanner.nextLine();
                while (!choice.matches("[1-4]")) {
                    System.out.println("–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n‚ñ∫ –ò–≥—Ä–æ–∫-" + this.id + " —Å—Ç–∞–≤–∏—Ç –∫–æ—Ä–∞–±–ª–∏:");
                    show();
                    System.out.println("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å:\n1) " + oneCellSheep + " - –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã—Ö\n2) " + twoCellSheep + " - –¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã—Ö\n3) " + threeCellSheep + " - —Ç—Ä—ë—Ö–ø–∞–ª—É–±–Ω—ã—Ö\n4) " + fourCellSheep + " - —á–µ—Ç—ã—Ä—ë—Ö–ø–∞–ª—É–±–Ω—ã—Ö");
                    choice = scanner.nextLine();
                }
                int choice1 = Integer.parseInt(choice);
                if ((choice1 == 1 && oneCellSheep == 0) || (choice1 == 2 && twoCellSheep == 0) || (choice1 == 3 && threeCellSheep == 0) || (choice1 == 4 && fourCellSheep == 0)) {
                    System.out.println("–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å " + choice + "-–ø–∞–ª—É–±–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π");
                    continue;
                }
                System.out.println("–ö—É–¥–∞ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å " + choice1 + "-–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å? ");
                choice = scanner.nextLine();
                while (!choice.matches("[–∞-–∫][0-9]")) {
                    System.out.println("–¢–∞–∫–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n‚ñ∫ –ò–≥—Ä–æ–∫-" + this.id + " —Å—Ç–∞–≤–∏—Ç –∫–æ—Ä–∞–±–ª–∏:");
                    show();
                    System.out.println("–ö—É–¥–∞ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å " + choice1 + "-–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å? ");
                    choice = scanner.nextLine();
                }
                int horizontal = getHorizontal(choice.toUpperCase().charAt(0));
                int vertical = Character.getNumericValue(choice.charAt(1));
//                System.out.println("Horizontal: " + horizontal + " Vertical: " + vertical + " ");
                boolean isOtherShipsNotNear = true;
                boolean isBorderNotNear = true;
                if (choice1 > 1 && choice1 < 5) {
                    System.out.println("–ö—É–¥–∞ –≤–µ–¥—ë–º –∫–æ—Ä–º—É?\n1) –í–≤–µ—Ä—Ö\n2) –í–Ω–∏–∑\n3) –í–ø—Ä–∞–≤–æ\n4) –í–ª–µ–≤–æ");
                    choice = scanner.nextLine();
                    while (!choice.matches("[1-4]")) {
                        System.out.println("–¢–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç!\n‚ñ∫ –ò–≥—Ä–æ–∫-" + this.id + " —Å—Ç–∞–≤–∏—Ç –∫–æ—Ä–∞–±–ª–∏:");
                        show();
                        System.out.println("–ö—É–¥–∞ –≤–µ–¥—ë–º –∫–æ—Ä–º—É?\n1) –í–≤–µ—Ä—Ö\n2) –í–Ω–∏–∑\n3) –í–ø—Ä–∞–≤–æ\n4) –í–ª–µ–≤–æ");
                        choice = scanner.nextLine();
                    }
                    switch (Integer.parseInt(choice)) {
                        case 1:
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ near –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
                            for (int i = -1; i < choice1+1; i++) {
                                for (int j = -1; j < 2; j++) {
                                    try {
                                        if (field[vertical-i][horizontal+j].equals(shipCell)) {
                                            isOtherShipsNotNear = false;
                                        }
                                    } catch (ArrayIndexOutOfBoundsException e) {
                                        continue;
                                    }
                                }
                            }
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                            try {
                                for (int i = 0; i < choice1; i++) {
                                    field[vertical-i][horizontal].isEmpty();
                                }
                            } catch (ArrayIndexOutOfBoundsException e) {
                                isBorderNotNear = false;
                            }
                            if (isBorderNotNear && isOtherShipsNotNear) {
                                for (int i = 0; i < choice1; i++) {
                                    field[vertical-i][horizontal] = shipCell;
                                    fieldWithShips[vertical-i][horizontal] = totalPlayerShips;
                                }
                            } else {
                                System.out.println("–ó–¥–µ—Å—å —Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–µ–ª—å–∑—è!");
                            }
                            break;
                        case 2:
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ near –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
                            for (int i = -1; i < choice1+1; i++) {
                                for (int j = -1; j < 2; j++) {
                                    try {
                                        if (field[vertical+i][horizontal+j].equals(shipCell)) {
                                            isOtherShipsNotNear = false;
                                        }
                                    } catch (ArrayIndexOutOfBoundsException e) {
                                        continue;
                                    }
                                }
                            }
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                            try {
                                for (int i = 0; i < choice1; i++) {
                                    field[vertical+i][horizontal].isEmpty();
                                }
                            } catch (ArrayIndexOutOfBoundsException e) {
                                isBorderNotNear = false;
                            }
                            if (isBorderNotNear && isOtherShipsNotNear) {
                                for (int i = 0; i < choice1; i++) {
                                    field[vertical+i][horizontal] = shipCell;
                                    fieldWithShips[vertical+i][horizontal] = totalPlayerShips;
                                }
                            } else {
                                System.out.println("–ó–¥–µ—Å—å —Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–µ–ª—å–∑—è!");
                            }
                            break;
                        case 3:
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ near –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
                            for (int i = -1; i < 2; i++) {
                                for (int j = -1; j < choice1+1; j++) {
                                    try {
                                        if (field[vertical-i][horizontal+j].equals(shipCell)) {
                                            isOtherShipsNotNear = false;
                                        }
                                    } catch (ArrayIndexOutOfBoundsException e) {
                                        continue;
                                    }
                                }
                            }
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                            try {
                                for (int i = 0; i < choice1; i++) {
                                    field[vertical][horizontal+i].isEmpty();
                                }
                            } catch (ArrayIndexOutOfBoundsException e) {
                                isBorderNotNear = false;
                            }
                            if (isBorderNotNear && isOtherShipsNotNear) {
                                for (int i = 0; i < choice1; i++) {
                                    field[vertical][horizontal+i] = shipCell;
                                    fieldWithShips[vertical][horizontal+i] = totalPlayerShips;
                                }

                            } else {
                                System.out.println("–ó–¥–µ—Å—å —Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–µ–ª—å–∑—è!");
                            }
                            break;
                        case 4:
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ near –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
                            for (int i = -1; i < 2; i++) {
                                for (int j = -1; j < choice1+1; j++) {
                                    try {
                                        if (field[vertical-i][horizontal-j].equals(shipCell)) {
                                            isOtherShipsNotNear = false;
                                        }
                                    } catch (ArrayIndexOutOfBoundsException e) {
                                        continue;
                                    }
                                }
                            }
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                            try {
                                for (int i = 0; i < choice1; i++) {
                                    field[vertical][horizontal-i].isEmpty();
                                }
                            } catch (ArrayIndexOutOfBoundsException e) {
                                isBorderNotNear = false;
                            }
                            if (isBorderNotNear && isOtherShipsNotNear) {
                                for (int i = 0; i < choice1; i++) {
                                    field[vertical][horizontal-i] = shipCell;
                                    fieldWithShips[vertical][horizontal-i] = totalPlayerShips;
                                }

                            } else {
                                System.out.println("–ó–¥–µ—Å—å —Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–µ–ª—å–∑—è!");
                            }
                            break;
                    }
                } else if (choice1 == 1) {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ near –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
                    for (int i = -1; i < 2; i++) {
                        for (int j = -1; j < choice1+1; j++) {
                            try {
                                if (field[vertical-i][horizontal-j].equals(shipCell)) {
                                    isOtherShipsNotNear = false;
                                }
                            } catch (ArrayIndexOutOfBoundsException e) {
                                continue;
                            }
                        }
                    }
                    if (isOtherShipsNotNear) {
                        field[vertical][horizontal] = shipCell;
                        fieldWithShips[vertical][horizontal] = totalPlayerShips;
                    } else {
                        System.out.println("–ó–¥–µ—Å—å —Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–µ–ª—å–∑—è!");
                    }
                }
                if (isBorderNotNear && isOtherShipsNotNear) {
                    switch (choice1) {
                        case 1:
                            oneCellSheep -= 1;
                            break;
                        case 2:
                            twoCellSheep -= 1;
                            break;
                        case 3:
                            threeCellSheep -= 1;
                            break;
                        case 4:
                            fourCellSheep -= 1;
                            break;
                        default:
                            break;
                    }
                    totalPlayerShips-=1;
                }
            }
            show();
            System.out.println("–í—Å–µ –∫–æ—Ä–∞–±–ª–∏ –∏–≥—Ä–æ–∫–∞-" + id + " —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã!");
            playerWait();
        }
        private int getHorizontal(char ch) {
            return switch (ch) {
                case '–ê' -> 0;
                case '–ë' -> 1;
                case '–í' -> 2;
                case '–ì' -> 3;
                case '–î' -> 4;
                case '–ï' -> 5;
                case '–ñ' -> 6;
                case '–ó' -> 7;
                case '–ò' -> 8;
                case '–ö' -> 9;
                default -> -1;
            };
        }
    }
}